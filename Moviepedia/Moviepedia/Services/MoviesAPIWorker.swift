//
//  MoviesAPIWorker.swift
//  Moviepedia
//
//  Created by Lucas Ferraço on 27/08/18.
//  Copyright (c) 2018 Lucas Ferraço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum MoviesAPIWorkerError {
	case NoConnection
	case Failure
}

class MoviesAPIWorker {
	
	private let networkDecodableWorker = NetworkDecodableWorker()
	
	//MARK:- API's properties
	
	private let baseURL = "https://api.themoviedb.org/3/movie"
	private let apiKey = "1f54bd990f1cdfb230adb312546d765d"
	
	public enum ListType: String {
		case upcoming 		= "/upcoming"
		case topRated 		= "/top_rated"
		case popular		= "/popular"
		case nowPlaying		= "/now_playing"
	}
	
	//MARK: Singleton Definition
	private static var theOnlyInstance: MoviesAPIWorker?
	public static var shared: MoviesAPIWorker {
		get {
			if theOnlyInstance == nil {
				theOnlyInstance = MoviesAPIWorker()
			}
			return theOnlyInstance!
		}
	}
	
	//MARK:- Public Methods
	
	public func fetchMoviesList(of type: ListType, on page: Int? = nil, _ completion: @escaping ([Movie]?, MoviesAPIWorkerError?) -> Void) {
		let fullURLString = baseURL + type.rawValue
		let params = listParameters(with: page)
		
		networkDecodableWorker.get(from: fullURLString, with: params) { (movies: [Movie]?, networkError) in
			if let error = networkError {
				let internalError = self.getMoviesAPIError(from: error)
				completion(nil, internalError)
				return
			}
			
			guard let movies = movies else {
				completion(nil, .Failure)
				return
			}
			
			completion(movies, nil)
		}
	}
	
	//MARK:- Auxiliary Methods
	
	private func listParameters(with page: Int?) -> [String : Any] {
		var params: [String : Any] = [:]
		
		params.updateValue(apiKey, forKey: "api_key")
		
		if let page = page {
			params.updateValue(page, forKey: "page")
		}
		
		if let languageCode = currentLanguageCode() {
			params.updateValue(languageCode, forKey: "language")
		}
		
		if let regionCode = currentRegionCode() {
			params.updateValue(regionCode, forKey: "region")
		}
		
		return params
	}
	
	private func currentLanguageCode() -> String? {
		let currentLocale = Locale.current
		return currentLocale.languageCode
	}
	
	private func currentRegionCode() -> String? {
		let currentLocale = Locale.current
		return currentLocale.regionCode
	}
	
	private func getMoviesAPIError(from networkError: NetworkDecodableWorkerError) -> MoviesAPIWorkerError {
		switch networkError {
		case .NoConnection:
			return .NoConnection
		case .MalformedData, .Failure:
			return .Failure
		}
	}
}
