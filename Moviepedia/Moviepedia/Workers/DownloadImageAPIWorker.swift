//
//  DownloadImageAPIWorker.swift
//  Moviepedia
//
//  Created by Lucas Ferraco on 28/08/18.
//  Copyright © 2018 Lucas Ferraço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class DownloadImageAPIWorker: TMDbClient {
    
    private let networkDecodableWorker = NetworkWorker()
	
	public enum ImageType {
		case poster
		case backdrop
		
		func getDefaultSizeString() -> String {
			switch self {
			case .poster:
				return "/w500"
			case .backdrop:
				return "/w300"
			}
		}
	}
	
    //MARK: Singleton Definition
    private static var theOnlyInstance: DownloadImageAPIWorker?
    public static var shared: DownloadImageAPIWorker {
        get {
            if theOnlyInstance == nil {
                theOnlyInstance = DownloadImageAPIWorker()
            }
            return theOnlyInstance!
        }
    }
    private override init() {
        super.init()
        updateProperties()
    }
    
    //MARK:- Shared Methods
	
	/// Download the image from the specified URL.
	///
	/// - Parameters:
	///   - path: The file path to be downloaded.
	///   - type: Whether poster or backdrop image.
	///   - completion: The handler to be called once the download has finished.
	public func downloadImage(from path: String, type: ImageType, _ completion: @escaping (UIImage?) -> Void) {
		guard let properties = properties else {
			updateProperties() { (error) in
				guard error == nil else {
					completion(nil)
					return
				}
				
				self.downloadImage(from: path, type: type, completion)
			}
			
			return
		}
		
		guard let preferredImageURL = properties.images?.safeBaseURL else {
			completion(nil)
			return
		}
		
		let completeURL = preferredImageURL + type.getDefaultSizeString() + path
		networkDecodableWorker.download(from: completeURL) { (data, error) in
			guard let unwrappedData = data, let image = UIImage(data: unwrappedData) else {
				completion(nil)
				return
			}
			
			completion(image)
		}
	}
    
    //MARK:- Auxiliary Methods
    
    private func updateProperties(_ completion: ((NetworkWorkerError?) -> Void)? = nil) {
        let propsURL = url(for: .configuration)
        let params = parameters()
        
        networkDecodableWorker.get(from: propsURL, with: params) { (properties: Properties?, error) in
            guard let properties = properties else {
                if let error = error {
                    completion?(error)
                } else {
                    completion?(.Failure)
                }
                
                return
            }
            
            self.properties = properties
            completion?(nil)
        }
    }
}
