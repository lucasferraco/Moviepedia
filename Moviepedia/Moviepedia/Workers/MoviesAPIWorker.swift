//
//  MoviesAPIWorker.swift
//  Moviepedia
//
//  Created by Lucas Ferraço on 27/08/18.
//  Copyright (c) 2018 Lucas Ferraço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

enum MoviesAPIWorkerError: Error {
	case NoConnection
	case Failure
}

class MoviesAPIWorker: TMDbClient {
	
	private let networkDecodableWorker = NetworkWorker()
	
	public enum ListType: String {
		case upcoming 		= "/upcoming"
		case topRated 		= "/top_rated"
		case popular		= "/popular"
		case nowPlaying		= "/now_playing"
	}
	
	//MARK: Singleton Definition
	private static var theOnlyInstance: MoviesAPIWorker?
	public static var shared: MoviesAPIWorker {
		get {
			if theOnlyInstance == nil {
				theOnlyInstance = MoviesAPIWorker()
			}
			return theOnlyInstance!
		}
	}
	private override init() {}
	
	//MARK:- Public Methods
	
	/// Downloads a list of movies' information according to the specified type.
	///
	/// - Parameters:
	///   - type: The type of list wanted.
	///   - page: The number of the page to be downloaded.
	///   - completion: The handler to be called once the request has finished.
	public func fetchMoviesList(of type: ListType, on page: Int? = nil, _ completion: @escaping ([Movie]?, MoviesAPIWorkerError?) -> Void) {
		let fullURLString = url(for: .movie) + type.rawValue
		let params = parameters([.page, .languageCode, .regionCode], forPage: page)
		
		networkDecodableWorker.get(from: fullURLString, with: params) { (movies: [Movie]?, networkError) in
			if let error = networkError {
				let internalError = self.getMoviesAPIError(from: error)
				completion(nil, internalError)
				return
			}
			
			guard let movies = movies else {
				completion(nil, .Failure)
				return
			}
			
			completion(movies, nil)
		}
	}
	
	//MARK:- Auxiliary Methods
	
	private func getMoviesAPIError(from networkError: NetworkWorkerError) -> MoviesAPIWorkerError {
		switch networkError {
		case .NoConnection:
			return .NoConnection
		case .MalformedData, .Failure:
			return .Failure
		}
	}
}
